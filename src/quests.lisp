(in-package #:quest)

(declaim (optimize (debug 3)))

(defdao discussion ()
    ((id :col-type serial :reader id)
     (post-count :col-type integer :col-default 0 :reader post-count))
  (:keys id))

(defdao quest ()
    ((id :col-type serial :reader id)
     (title :col-type (or text db-null) :initarg :title :reader title)
     (user-id :col-type (or integer db-null) :initarg :user-id :accessor user-id)
     (discussion-id :col-type integer :reader discussion-id)
     (chapter-count :col-type integer :col-default 0 :reader chapter-count)
     (created :col-type :timestamp-with-time-zone :col-default (:now) :reader created))
  (:keys id)
  (:foreign-key user user-id id)
  (:foreign-key discussion discussion-id id))

(defdao chapter ()
    ((id :col-type serial :reader id)
     (quest-id :col-type integer :initarg :quest-id :reader quest-id)
     (title :col-type (or text db-null) :initarg :title :accessor title)
     (ordinal :col-type integer :accessor ordinal)
     (discussion-id :col-type integer :reader discussion-id)
     (update-count :col-type integer :col-default 0 :reader update-count)
     (created :col-type :timestamp-with-time-zone :col-default (:now) :reader created))
  (:keys id)
  (:unique ordinal quest-id)
  (:foreign-key quest quest-id id)
  (:foreign-key discussion discussion-id id))

(defmacro def-ordinal-allocator (name parent child &optional (counter-name (symbolicate child "-COUNT")))
  (let ((arg (symbolicate parent "-ID")))
   `(defprepared-with-names ,name (,arg)
        ((:update ',parent :set ',counter-name (:+ 1 ',counter-name)
                  :where (:= 'id '$1)
                  :returning ',counter-name)
         ,arg)
        :single)))

(def-ordinal-allocator alloc-chapter-ordinal quest chapter)

(defmethod insert-dao :around ((chapter chapter))
  (with-transaction (insert-chapter)
    (setf (slot-value chapter 'ordinal)
          (alloc-chapter-ordinal (quest-id chapter)))
    (call-next-method)))

(defprepared-with-names chapters (quest)
    ((:order-by (:select :* :from 'chapter :where (:= 'quest-id :$1))
                (:desc 'ordinal))
     (id quest))
    (:dao chapter))

(defprepared-with-names latest-chapter (quest)
    ((:limit (:order-by (:select :* :from 'chapter :where (:= 'quest-id :$1))
                        (:desc 'ordinal))
             1)
     (id quest))
    (:dao chapter :single))
