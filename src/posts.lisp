(in-package #:quest)

(defdao post ()
    ((id :col-type serial :reader id)
     (user-id :col-type (or integer db-null) :initarg :user-id :reader user-id)
     (address :col-type inet :initarg :address :reader address)
     (title :col-type (or text db-null) :initarg :title :accessor title)
     (alias :col-type (or text db-null) :initarg :alias :accessor alias)
     (body :col-type text :initarg :body :accessor body)
     (edited :col-type (or :timestamp-with-time-zone db-null) :accessor edited)
     (created :col-type :timestamp-with-time-zone :col-default (:now) :reader created))
  (:keys id))

(defdao update ()
    ((post-id :col-type integer :initarg :post-id :reader post-id
              :initform (error "Updates must have a post ID"))
     (chapter-id :col-type integer :initarg :chapter-id :reader chapter-id
                 :initform (error "Updates must have a chapter ID"))
     (ordinal :col-type integer :reader ordinal)
     (suggestion-count :col-type integer :col-default 0 :reader suggestion-count))
  (:keys post-id)
  (:foreign-key post post-id id)
  (:foreign-key chapter chapter-id id)
  (:unique ordinal chapter-id))

(defprepared-with-names alloc-update-ordinal (chapter-id)
    ((:update 'chapter :set 'update-count (:+ 1 'update-count)
              :where (:= 'id '$1)
              :returning 'update-count)
     chapter-id)
    :single)

(defmethod insert-dao :around ((update update))
  (with-transaction (insert-update)
    (setf (slot-value update 'ordinal)
          (alloc-update-ordinal (chapter-id update)))
    (call-next-method)))

(defdao suggestion ()
    ((post-id :col-type integer :initarg :post-id :reader post-id)
     (update-id :col-type integer :initarg :update-id :reader update-id)
     (ordinal :col-type integer :reader ordinal))
  (:keys post-id)
  (:foreign-key post post-id id)
  (:foreign-key update update-id post-id)
  (:unique ordinal update-id))

(defprepared-with-names alloc-suggestion-ordinal (update-id)
    ((:update 'update :set 'suggestion-count (:+ 1 'suggestion-count)
              :where (:= 'post-id '$1)
              :returning 'suggestion-count)
     update-id)
    :single)

(defmethod insert-dao :around ((suggestion suggestion))
  (with-transaction (insert-suggestion)
    (setf (slot-value suggestion 'ordinal)
          (alloc-update-ordinal (update-id suggestion)))
    (call-next-method)))

(defprepared-with-names updates-of (chapter)
    ((:order-by (:select :* :from 'update :where (:= 'chapter-id :$1))
                'ordinal)
     (id chapter))
    (:dao update))
